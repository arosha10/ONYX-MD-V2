const { cmd } = require("../command");
const axios = require("axios");

const HF_API_URL = "https://api-inference.huggingface.co/models/CompVis/stable-diffusion-v1-4";
const HF_API_KEY = "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";

cmd(
  {
    pattern: "img",
    alias: ["aiimage", "draw"],
    react: "ðŸŽ¨",
    desc: "Generate an AI image using HuggingFace Stable Diffusion (API key included)",
    category: "ai",
    filename: __filename,
  },
  async (
    robin,
    mek,
    m,
    {
      from,
      quoted,
      body,
      isCmd,
      command,
      args,
      q,
      reply,
    }
  ) => {
    try {
      if (!q) {
        return reply("*Usage:* /img <prompt>\nExample: /img a cat astronaut");
      }
      reply("*Generating your image...* ðŸŽ¨ (using HuggingFace, may be slow)");
      const response = await axios.post(
        HF_API_URL,
        { inputs: q },
        {
          responseType: "arraybuffer",
          headers: {
            Authorization: `Bearer ${HF_API_KEY}`,
            "Content-Type": "application/json",
          },
        }
      );
      if (response.headers["content-type"].startsWith("image/")) {
        await robin.sendMessage(
          from,
          { image: Buffer.from(response.data), caption: `*Prompt:* ${q}` },
          { quoted: mek }
        );
        return reply("> *AI image generated by HuggingFace Stable Diffusion!* ðŸŽ¨");
      } else {
        return reply("*Failed to generate image. The API may be busy, rate-limited, or your key may not have access. Please check your HuggingFace account.*");
      }
    } catch (e) {
      if (e.response && e.response.status === 401) {
        reply("*Unauthorized: Your HuggingFace API key is invalid or does not have access to this model. Please check your key and model permissions.*");
      } else if (e.response && e.response.status === 404) {
        reply("*Model not found or not enabled for inference. Please check the model name or try another supported model.*");
      } else {
        console.error(e);
        reply(`*Error: ${e.message || e}*`);
      }
    }
  }
);